
import torch
from diffusers import StableDiffusionPipeline
import os
import sys
from datetime import datetime
import argparse
import re
import google.generativeai as genai
from dotenv import load_dotenv
import json

def generate_enhanced_prompts(user_prompt: str, gemini_model) -> tuple[str, str]:
    """
    Geminiを使用して、ユーザーの簡単なプロンプトを詳細な英語のプロンプトとネガティブプロンプトに変換します。

    Args:
        user_prompt (str): ユーザーが入力したプロンプト。
        gemini_model: 初期化済みのGeminiモデル。

    Returns:
        tuple[str, str]: (高品質化されたプロンプト, ネガティブプロンプト)
    """
    print("🤖 Geminiが最適なプロンプトを考えています...")
    try:
        instruction = f"""あなたは、Stable Diffusionのような画像生成AIのための世界最高のプロンプトエンジニアです。
あなたの仕事は、ユーザーの簡単な日本語プロンプトを、非常に詳細で、具体的で、効果的な英語のプロンプトに変換することです。
生成される画像が、ユーザーの要求を忠実に、かつ高品質に表現するようにしてください。

**最も重要なルール: ユーザーの指示を絶対にそのまま守ってください。**
ユーザーが「熊」と言ったら、プロンプトは必ず熊に関するものでなければなりません。「熊に乗った少女」や「テディベア」のように、主題を変えてはいけません。

**手順:**
1.  **翻訳と理解:** ユーザーの日本語プロンプト 「{user_prompt}」 を正確に英訳し、核となる主題とその属性を理解します。
2.  **詳細化:** 単なる翻訳を超えて、プロンプトを豊かに詳細化します。
    写真のようなリアルさを出すために、構成、照明、細部に関するキーワードを追加します。
    プロのカメラマンが撮影を準備するように、被写体の外観、環境、雰囲気を具体的に記述してください。
    "masterpiece, best quality, 8k, ultra-detailed, photorealistic, sharp focus, professional photography"のような表現を使ってください。
3.  **ネガティブプロンプト:** 画像生成AIが苦手とする要素を排除するための、強力なネガティブプロンプトを作成します。
    "deformed, disfigured, ugly, blurry, low quality, low-res, text, watermark, signature, username, error, jpeg artifacts, cartoon, anime, illustration, painting"のような言葉を含めてください。

**Input from User (Japanese):**
「{user_prompt}」

**出力形式 (JSON形式):**
出力は、"prompt"と"negative_prompt"の2つのキーを持つ、有効なJSONオブジェクトのみを含むようにしてください。
説明的なテキストやマークダウンコードブロック (```json ... ```) は**絶対に**含めないでください。

**例: ユーザープロンプトが「桜の木の下で眠る猫」の場合:**
{{
  "prompt": "masterpiece, best quality, 8k, photorealistic, A beautiful calico cat is peacefully sleeping under a magnificent, fully bloomed cherry blossom tree. Pink sakura petals are gently falling around the cat. The scene is bathed in soft, warm spring sunlight. ultra-detailed, sharp focus on the cat's fur, cinematic lighting, shallow depth of field",
  "negative_prompt": "deformed, disfigured, ugly, blurry, low quality, low-res, text, watermark, signature, username, error, jpeg artifacts, cartoon, anime, illustration, painting, more than one cat, person, people"
}}
"""
        response = gemini_model.generate_content(instruction)
        # AIが返す可能性のあるマークダウンコードブロックを削除して安定性を向上
        cleaned_text = response.text.strip().replace("```json", "").replace("```", "")
        prompts = json.loads(cleaned_text)

        # 空のプロンプトが返ってきた場合のフォールバック
        if not prompts.get("prompt"):
            print("⚠️ Geminiが空のプロンプトを返しました。フォールバックします。")
            raise ValueError("Empty prompt returned")

        print(f"✨ ポジティブプロンプト: {prompts['prompt']}")
        print(f"🚫 ネガティブプロンプト: {prompts['negative_prompt']}")
        return prompts['prompt'], prompts['negative_prompt']
    except Exception as e:
        print(f"⚠️ Geminiでのプロンプト生成に失敗しました: {e}", file=sys.stderr)
        print("元のプロンプトで画像を生成します。")
        return f"masterpiece, best quality, photorealistic, {user_prompt}", "deformed, disfigured, ugly, blurry, low quality, low-res, text, watermark, signature, username, error, jpeg artifacts, cartoon, anime, illustration, painting"

def generate_and_save_image(pipe, prompt: str, negative_prompt: str, save_folder: str, guidance_scale: float, num_inference_steps: int):
    """
    ロード済みのStable Diffusionパイプラインを使用して画像を生成し、指定されたフォルダに保存します。

    Args:
        pipe: ロード済みのStableDiffusionPipelineオブジェクト。
        prompt (str): 画像生成のためのプロンプト。
        negative_prompt (str): 生成してほしくない要素を指定するプロンプト。
        save_folder (str): 画像を保存するフォルダのパス。
        guidance_scale (float): プロンプトへの忠実度を調整するスケール。
        num_inference_steps (int): 推論ステップ数。
    """
    try:
        print("-" * 20)
        print(f"📏 ガイダンススケール: {guidance_scale}")
        print(f"🔄 推論ステップ数: {num_inference_steps}")
        # --- 1. 画像生成 ---
        print(f"🎨 '{prompt}' の画像を生成しています...")
        image = pipe(
            prompt,
            negative_prompt=negative_prompt,
            num_inference_steps=num_inference_steps,
            guidance_scale=guidance_scale
        ).images[0]

        # --- 2. ユニークなファイル名を生成して画像を保存 ---
        os.makedirs(save_folder, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        # プロンプトをファイル名として使えるようにサニタイズ
        prompt_slug = re.sub(r'[\\/*?:"<>|]', "", prompt)[:50] # ファイル名に使えない文字を削除し、長さを制限
        filename = f"{timestamp}_{prompt_slug}.png"
        save_path = os.path.join(save_folder, filename)

        print(f"💾 画像を保存中... -> {save_path}")
        image.save(save_path)

        print(f"✅ 画像を保存しました: {save_path}")
        print("-" * 20) # 区切り線

    except Exception as e:
        print(f"❌ 予期せぬエラーが発生しました: {e}", file=sys.stderr)

def main():
    """スクリプトのメイン処理"""
    load_dotenv()
    parser = argparse.ArgumentParser(
        description="Stable Diffusionを使って対話形式で画像を生成し、保存します。",
        formatter_class=argparse.RawTextHelpFormatter # ヘルプの改行を維持
    )
    parser.add_argument(
        "-o", "--output",
        type=str,
        default="img",
        help="画像を保存するフォルダのパス。 (デフォルト: img)"
    )
    parser.add_argument(
        "--model_id",
        type=str,
        default="stabilityai/stable-diffusion-2-1-base",
        help="使用するStable DiffusionモデルのID。 (例: 'stabilityai/stable-diffusion-xl-base-1.0')"
    )
    parser.add_argument(
        "--guidance_scale",
        type=float,
        default=8.0,
        help="プロンプトへの忠実度を調整するスケール。\n値が高いほどプロンプトに忠実になりますが、画像の質が低下する可能性があります。\n(デフォルト: 8.0)"
    )
    parser.add_argument(
        "--steps",
        "--num_inference_steps",
        dest="steps", # destを使い、複数の名前を受け付ける
        type=int,
        default=50,
        help="画像生成のステップ数。\n値が高いほど高品質になりますが、生成に時間がかかります。\n(デフォルト: 50)"
    )
    args = parser.parse_args()

    # スクリプトの場所を基準に保存先フォルダの絶対パスを決定
    script_dir = os.path.dirname(os.path.abspath(__file__))
    save_folder_path = os.path.join(script_dir, args.output)

    try:
        # --- Geminiモデルのロード処理 ---
        gemini_model = None
        api_key = os.getenv("GOOGLE_API_KEY")
        if api_key:
            try:
                genai.configure(api_key=api_key)
                gemini_model = genai.GenerativeModel('gemini-1.0-pro')
                print("✅ Geminiプロンプトエンジンが有効です。")
            except Exception as e:
                print(f"⚠️ Geminiの初期化に失敗しました: {e}", file=sys.stderr)
                print("プロンプトの自動生成は無効になります。")
        else:
            print("ℹ️ GOOGLE_API_KEYが設定されていません。プロンプトの自動生成は無効です。")

        # --- モデルのロード処理 (一度だけ実行) ---
        device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"ℹ️ 使用デバイス: {device}")
        if device == "cpu":
            print("⚠️ 警告: CPUで実行しています。画像の生成には数分かかる場合があります。")

        print(f"🔄 モデル '{args.model_id}' をロードしています... (初回は時間がかかります)")
        torch_dtype = torch.float16 if device == "cuda" else torch.float32
        pipe = StableDiffusionPipeline.from_pretrained(args.model_id, torch_dtype=torch_dtype)
        pipe = pipe.to(device)
        print("✅ モデルの準備が完了しました。")

        # --- 対話ループ ---
        print("\n🎨 画像生成を開始します。プロンプトを入力してください。")
        print("（終了するには 'quit' または 'exit' と入力）")
        while True:
            user_prompt = input("✅ 何を生成しますか？ > ").strip()
            if user_prompt.lower() in ["quit", "exit"]:
                print("👋 終了します。")
                break
            if user_prompt:
                # Geminiが使えない場合や失敗した場合の、堅実なデフォルト値を設定
                prompt = user_prompt
                negative_prompt = "deformed, disfigured, ugly, blurry, low quality, low-res, text, watermark, signature, username, error, jpeg artifacts, cartoon, anime, illustration, painting, person, people"
                # Geminiが利用可能なら、プロンプトを高品質化する
                if gemini_model:
                    prompt, negative_prompt = generate_enhanced_prompts(user_prompt, gemini_model)
                generate_and_save_image(pipe, prompt, negative_prompt, save_folder_path, args.guidance_scale, args.steps)
    except Exception as e:
        print(f"❌ 致命的なエラーが発生しました: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
